{"ast":null,"code":"var _jsxFileName = \"/Users/chrisunjae/Documents/Programming/Bandit/src/Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport Entry from './Entry';\nimport WordList from './WordList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dictionary: require(\"./data/words_dictionary.json\"),\n      wordList: [],\n      flippedTiles: []\n    };\n    this.ref = /*#__PURE__*/React.createRef();\n  }\n  handleSubmit(word) {\n    let valid;\n    if (!(word in this.state.dictionary)) {\n      return false;\n    }\n\n    // check if word can be made from board alone\n    valid = true;\n    let freqs = charCounts(word);\n    let freqs_copy = JSON.parse(JSON.stringify(freqs));\n    for (let i = 0; i < this.state.flippedTiles.length; i++) {\n      if (this.state.flippedTiles[i] in freqs_copy) {\n        freqs_copy[this.state.flippedTiles[i]]--;\n      }\n    }\n    if (countMaxVal(freqs_copy) <= 0) {\n      for (let i = this.state.flippedTiles.length - 1; i >= 0; i--) {\n        let c = this.state.flippedTiles[i];\n        if (c in freqs && freqs[c] > 0) {\n          freqs[c]--;\n          this.state.flippedTiles.splice(i, 1);\n        }\n      }\n    } else {\n      let stealFrom = -1;\n      for (let i = this.state.wordList.length - 1; i >= 0; i--) {\n        let curWord = this.state.wordList[i];\n        // very rough heuristic for words that are very similar\n        if (word === curWord + 's' || word === curWord + 'es' || word === curWord + 'd' || word === curWord + 'ed' || word === curWord + 'ing') {\n          continue;\n        }\n        freqs_copy = JSON.parse(JSON.stringify(freqs));\n        for (let j = 0; j < curWord.length; j++) {\n          if (curWord[j] in freqs_copy) {\n            freqs_copy[curWord[j]]--;\n          }\n        }\n        for (let k = 0; k < this.state.flippedTiles.length; k++) {\n          if (this.state.flippedTiles[k] in freqs_copy) {\n            freqs_copy[this.state.flippedTiles[k]]--;\n          }\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          stealFrom = i;\n          for (let k = 0; k < curWord.length; k++) {\n            let c = curWord[k];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n            }\n          }\n          console.log(this.state.wordList);\n          console.log(i);\n          this.state.wordList.splice(i, 1);\n          console.log(this.state.wordList);\n          for (let k = this.state.flippedTiles.length - 1; k >= 0; k--) {\n            let c = this.state.flippedTiles[k];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n              this.state.flippedTiles.splice(k, 1);\n            }\n          }\n          break;\n        }\n      }\n      if (stealFrom === -1) {\n        valid = false;\n      }\n    }\n    // TODO: check if word can be made from steals\n\n    if (valid) {\n      this.setState({\n        wordList: [...this.state.wordList, word]\n      });\n    }\n    return valid;\n  }\n  handleFlip(tile) {\n    this.setState({\n      flippedTiles: [...this.state.flippedTiles, tile]\n    });\n    this.ref.current.focus();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        onFlip: tile => this.handleFlip(tile),\n        flippedTiles: this.state.flippedTiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Entry, {\n        onSubmit: word => this.handleSubmit(word),\n        passedRef: this.ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordList, {\n        wordList: this.state.wordList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n}\nfunction charCounts(s) {\n  return [...s].reduce((a, e) => {\n    a[e] = a[e] ? a[e] + 1 : 1;\n    return a;\n  }, {});\n}\nfunction countMaxVal(o) {\n  let out = 0;\n  for (const elt in o) {\n    out = Math.max(o[elt], out);\n  }\n  return out;\n}\nexport default Game;","map":{"version":3,"names":["React","Board","Entry","WordList","Game","Component","constructor","props","state","dictionary","require","wordList","flippedTiles","ref","createRef","handleSubmit","word","valid","freqs","charCounts","freqs_copy","JSON","parse","stringify","i","length","countMaxVal","c","splice","stealFrom","curWord","j","k","console","log","setState","handleFlip","tile","current","focus","render","s","reduce","a","e","o","out","elt","Math","max"],"sources":["/Users/chrisunjae/Documents/Programming/Bandit/src/Game.js"],"sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport Entry from './Entry';\nimport WordList from './WordList';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dictionary: require(\"./data/words_dictionary.json\"),\n      wordList: [],\n      flippedTiles: [],\n    }\n    this.ref = React.createRef();\n  }\n\n  handleSubmit(word) {\n    let valid;\n    if (!(word in this.state.dictionary)) {\n      return false;\n    }\n    \n    // check if word can be made from board alone\n    valid = true;\n    let freqs = charCounts(word);\n    let freqs_copy = JSON.parse(JSON.stringify(freqs));\n    for (let i = 0; i < this.state.flippedTiles.length; i++) {\n      if (this.state.flippedTiles[i] in freqs_copy) {\n        freqs_copy[this.state.flippedTiles[i]]--;\n      }\n    }\n    if (countMaxVal(freqs_copy) <= 0) {\n      for (let i = this.state.flippedTiles.length - 1; i >= 0; i--) {\n        let c = this.state.flippedTiles[i];\n        if (c in freqs && freqs[c] > 0) {\n          freqs[c]--;\n          this.state.flippedTiles.splice(i, 1);\n        }\n      }\n    }\n    else {\n      let stealFrom = -1;\n      for (let i = this.state.wordList.length - 1; i >= 0; i--) {\n        let curWord = this.state.wordList[i];\n        // very rough heuristic for words that are very similar\n        if (word === curWord + 's' ||\n            word === curWord + 'es' ||\n            word === curWord + 'd' ||\n            word === curWord + 'ed' ||\n            word === curWord + 'ing') {\n          continue;\n        }\n        freqs_copy = JSON.parse(JSON.stringify(freqs)); \n        for (let j = 0; j < curWord.length; j++) {\n          if (curWord[j] in freqs_copy) {\n            freqs_copy[curWord[j]]--;\n          }\n        }\n        for (let k = 0; k < this.state.flippedTiles.length; k++) {\n          if (this.state.flippedTiles[k] in freqs_copy) {\n            freqs_copy[this.state.flippedTiles[k]]--;\n          }\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          stealFrom = i;\n          for (let k = 0; k < curWord.length; k++) {\n            let c = curWord[k];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n            }\n          }\n          console.log(this.state.wordList);\n          console.log(i);\n          this.state.wordList.splice(i, 1);\n          console.log(this.state.wordList);\n          for (let k = this.state.flippedTiles.length - 1; k >= 0; k--) {\n            let c = this.state.flippedTiles[k];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n              this.state.flippedTiles.splice(k, 1);\n            }\n          } \n          break;\n        }\n      }\n      if (stealFrom === -1) {\n        valid = false;\n      }\n    }\n    // TODO: check if word can be made from steals\n    \n    if (valid) {\n      this.setState({\n        wordList: [...this.state.wordList, word],\n      })\n    }\n    return valid;\n  }\n\n  handleFlip(tile) {\n    this.setState({\n      flippedTiles: [...this.state.flippedTiles, tile]\n    });\n    this.ref.current.focus();\n  }\n\n  render() {\n    return (\n      <div>\n        <Board\n          onFlip={(tile) => this.handleFlip(tile)} \n          flippedTiles={this.state.flippedTiles}\n        />\n        <Entry onSubmit={(word) => this.handleSubmit(word)} passedRef={this.ref}/>\n        <WordList wordList={this.state.wordList} />\n      </div>\n    );\n  }\n}\n\nfunction charCounts(s) {\n  return [...s].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {});\n}\n\nfunction countMaxVal(o) {\n  let out = 0;\n  for (const elt in o) {\n    out = Math.max(o[elt], out);\n  }\n  return out;\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}