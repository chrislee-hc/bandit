{"ast":null,"code":"var _jsxFileName = \"/Users/chrisunjae/Documents/Programming/Bandit/bandit-client/src/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Reset from \"./Reset\";\nimport Board from \"./Board\";\nimport Entry from \"./Entry\";\nimport WordList from \"./WordList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game(props) {\n  _s();\n  let [wordList, setWordList] = useState([]);\n  let [flippedTiles, setFlippedTiles] = useState([]);\n  let ref = useRef(null);\n  useEffect(() => {\n    const flipListener = newFlippedTiles => {\n      setFlippedTiles(newFlippedTiles);\n    };\n    props.socket.on(\"updateFlippedTiles\", flipListener);\n    return () => {\n      props.socket.off(\"updateFlippedTiles\");\n    };\n  }, [props.socket]);\n  const handleSubmit = word => {\n    let dictionary = [];\n    let valid;\n    if (!(word in dictionary)) {\n      return false;\n    }\n\n    // check if word can be made from board alone\n    valid = true;\n    let freqs = charCounts(word);\n    let freqs_copy = JSON.parse(JSON.stringify(freqs));\n    for (let i = 0; i < flippedTiles.length; i++) {\n      if (flippedTiles[i] in freqs_copy) {\n        freqs_copy[flippedTiles[i]]--;\n      }\n    }\n    if (countMaxVal(freqs_copy) <= 0) {\n      for (let i = flippedTiles.length - 1; i >= 0; i--) {\n        let c = flippedTiles[i];\n        if (c in freqs && freqs[c] > 0) {\n          freqs[c]--;\n          flippedTiles.splice(i, 1);\n        }\n      }\n    } else {\n      let stealFrom = -1;\n      for (let i = wordList.length - 1; i >= 0; i--) {\n        let curWord = wordList[i];\n        // very rough heuristic for words that are very similar\n        if (word === curWord + \"s\" || word === curWord + \"es\" || word === curWord + \"d\" || word === curWord + \"ed\" || word === curWord + \"ing\" || word === curWord + \"y\") {\n          continue;\n        }\n        freqs_copy = JSON.parse(JSON.stringify(freqs));\n        let validSteal = true;\n        let curWordFreqs = charCounts(curWord);\n        for (let c in curWordFreqs) {\n          if (!(c in freqs_copy)) {\n            validSteal = false;\n          } else {\n            if (curWordFreqs[c] > freqs_copy[c]) {\n              validSteal = false;\n            }\n            freqs_copy[c] -= curWordFreqs[c];\n          }\n        }\n        if (!validSteal) {\n          continue;\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          continue;\n        }\n        for (let j = 0; j < flippedTiles.length; j++) {\n          if (flippedTiles[j] in freqs_copy) {\n            freqs_copy[flippedTiles[j]]--;\n          }\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          stealFrom = i;\n          for (let j = 0; j < curWord.length; j++) {\n            let c = curWord[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n            }\n          }\n          wordList.splice(i, 1);\n          for (let j = flippedTiles.length - 1; j >= 0; j--) {\n            let c = flippedTiles[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n              flippedTiles.splice(j, 1);\n            }\n          }\n          break;\n        }\n      }\n      if (stealFrom === -1) {\n        valid = false;\n      }\n    }\n    // TODO: check more edge cases\n    // TODO: improve similarity heuristic\n    // TODO: check for multi-word steals\n\n    if (valid) {\n      setWordList([...this.state.wordList, word]);\n    }\n    return valid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Reset, {\n      socket: props.socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      flippedTiles: flippedTiles,\n      socket: props.socket,\n      passedRef: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Entry, {\n      passedRef: ref,\n      socket: props.socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WordList, {\n      socket: props.socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"ktZBstC9QyLk0K0m4lI62suL6aA=\");\n_c = Game;\nfunction charCounts(s) {\n  return [...s].reduce((a, e) => {\n    a[e] = a[e] ? a[e] + 1 : 1;\n    return a;\n  }, {});\n}\nfunction countMaxVal(o) {\n  let out = 0;\n  for (const elt in o) {\n    out = Math.max(o[elt], out);\n  }\n  return out;\n}\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Reset","Board","Entry","WordList","Game","props","wordList","setWordList","flippedTiles","setFlippedTiles","ref","flipListener","newFlippedTiles","socket","on","off","handleSubmit","word","dictionary","valid","freqs","charCounts","freqs_copy","JSON","parse","stringify","i","length","countMaxVal","c","splice","stealFrom","curWord","validSteal","curWordFreqs","j","state","s","reduce","a","e","o","out","elt","Math","max"],"sources":["/Users/chrisunjae/Documents/Programming/Bandit/bandit-client/src/Game.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nimport Reset from \"./Reset\";\nimport Board from \"./Board\";\nimport Entry from \"./Entry\";\nimport WordList from \"./WordList\";\n\nfunction Game(props) {\n  let [wordList, setWordList] = useState([]);\n  let [flippedTiles, setFlippedTiles] = useState([]);\n  let ref = useRef(null);\n\n  useEffect(() => {\n    const flipListener = (newFlippedTiles) => {\n      setFlippedTiles(newFlippedTiles);\n    };\n\n    props.socket.on(\"updateFlippedTiles\", flipListener);\n\n    return () => {\n      props.socket.off(\"updateFlippedTiles\");\n    };\n  }, [props.socket]);\n\n  const handleSubmit = (word) => {\n    let dictionary = [];\n    let valid;\n    if (!(word in dictionary)) {\n      return false;\n    }\n\n    // check if word can be made from board alone\n    valid = true;\n    let freqs = charCounts(word);\n    let freqs_copy = JSON.parse(JSON.stringify(freqs));\n    for (let i = 0; i < flippedTiles.length; i++) {\n      if (flippedTiles[i] in freqs_copy) {\n        freqs_copy[flippedTiles[i]]--;\n      }\n    }\n    if (countMaxVal(freqs_copy) <= 0) {\n      for (let i = flippedTiles.length - 1; i >= 0; i--) {\n        let c = flippedTiles[i];\n        if (c in freqs && freqs[c] > 0) {\n          freqs[c]--;\n          flippedTiles.splice(i, 1);\n        }\n      }\n    } else {\n      let stealFrom = -1;\n      for (let i = wordList.length - 1; i >= 0; i--) {\n        let curWord = wordList[i];\n        // very rough heuristic for words that are very similar\n        if (\n          word === curWord + \"s\" ||\n          word === curWord + \"es\" ||\n          word === curWord + \"d\" ||\n          word === curWord + \"ed\" ||\n          word === curWord + \"ing\" ||\n          word === curWord + \"y\"\n        ) {\n          continue;\n        }\n        freqs_copy = JSON.parse(JSON.stringify(freqs));\n        let validSteal = true;\n        let curWordFreqs = charCounts(curWord);\n        for (let c in curWordFreqs) {\n          if (!(c in freqs_copy)) {\n            validSteal = false;\n          } else {\n            if (curWordFreqs[c] > freqs_copy[c]) {\n              validSteal = false;\n            }\n            freqs_copy[c] -= curWordFreqs[c];\n          }\n        }\n        if (!validSteal) {\n          continue;\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          continue;\n        }\n        for (let j = 0; j < flippedTiles.length; j++) {\n          if (flippedTiles[j] in freqs_copy) {\n            freqs_copy[flippedTiles[j]]--;\n          }\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          stealFrom = i;\n          for (let j = 0; j < curWord.length; j++) {\n            let c = curWord[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n            }\n          }\n          wordList.splice(i, 1);\n          for (let j = flippedTiles.length - 1; j >= 0; j--) {\n            let c = flippedTiles[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n              flippedTiles.splice(j, 1);\n            }\n          }\n          break;\n        }\n      }\n      if (stealFrom === -1) {\n        valid = false;\n      }\n    }\n    // TODO: check more edge cases\n    // TODO: improve similarity heuristic\n    // TODO: check for multi-word steals\n\n    if (valid) {\n      setWordList([...this.state.wordList, word]);\n    }\n    return valid;\n  };\n\n  return (\n    <div>\n      <Reset socket={props.socket} />\n      <Board\n        flippedTiles={flippedTiles}\n        socket={props.socket}\n        passedRef={ref}\n      />\n      <Entry passedRef={ref} socket={props.socket} />\n      <WordList socket={props.socket} />\n    </div>\n  );\n}\n\nfunction charCounts(s) {\n  return [...s].reduce((a, e) => {\n    a[e] = a[e] ? a[e] + 1 : 1;\n    return a;\n  }, {});\n}\n\nfunction countMaxVal(o) {\n  let out = 0;\n  for (const elt in o) {\n    out = Math.max(o[elt], out);\n  }\n  return out;\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}