{"ast":null,"code":"var _jsxFileName = \"/Users/chrisunjae/Documents/Programming/Bandit/bandit-client/src/Game.js\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport Entry from \"./Entry\";\nimport WordList from \"./WordList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dictionary: require(\"./data/words_dictionary.json\"),\n      wordList: [],\n      flippedTiles: []\n    };\n    this.ref = /*#__PURE__*/React.createRef();\n  }\n  handleSubmit(word) {\n    let valid;\n    if (!(word in this.state.dictionary)) {\n      return false;\n    }\n\n    // check if word can be made from board alone\n    valid = true;\n    let freqs = charCounts(word);\n    let freqs_copy = JSON.parse(JSON.stringify(freqs));\n    for (let i = 0; i < this.state.flippedTiles.length; i++) {\n      if (this.state.flippedTiles[i] in freqs_copy) {\n        freqs_copy[this.state.flippedTiles[i]]--;\n      }\n    }\n    if (countMaxVal(freqs_copy) <= 0) {\n      for (let i = this.state.flippedTiles.length - 1; i >= 0; i--) {\n        let c = this.state.flippedTiles[i];\n        if (c in freqs && freqs[c] > 0) {\n          freqs[c]--;\n          this.state.flippedTiles.splice(i, 1);\n        }\n      }\n    } else {\n      let stealFrom = -1;\n      for (let i = this.state.wordList.length - 1; i >= 0; i--) {\n        let curWord = this.state.wordList[i];\n        // very rough heuristic for words that are very similar\n        if (word === curWord + \"s\" || word === curWord + \"es\" || word === curWord + \"d\" || word === curWord + \"ed\" || word === curWord + \"ing\" || word === curWord + \"y\") {\n          continue;\n        }\n        freqs_copy = JSON.parse(JSON.stringify(freqs));\n        let validSteal = true;\n        let curWordFreqs = charCounts(curWord);\n        for (let c in curWordFreqs) {\n          if (!(c in freqs_copy)) {\n            validSteal = false;\n          } else {\n            if (curWordFreqs[c] > freqs_copy[c]) {\n              validSteal = false;\n            }\n            freqs_copy[c] -= curWordFreqs[c];\n          }\n        }\n        if (!validSteal) {\n          continue;\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          continue;\n        }\n        for (let j = 0; j < this.state.flippedTiles.length; j++) {\n          if (this.state.flippedTiles[j] in freqs_copy) {\n            freqs_copy[this.state.flippedTiles[j]]--;\n          }\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          stealFrom = i;\n          for (let j = 0; j < curWord.length; j++) {\n            let c = curWord[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n            }\n          }\n          this.state.wordList.splice(i, 1);\n          for (let j = this.state.flippedTiles.length - 1; j >= 0; j--) {\n            let c = this.state.flippedTiles[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n              this.state.flippedTiles.splice(j, 1);\n            }\n          }\n          break;\n        }\n      }\n      if (stealFrom === -1) {\n        valid = false;\n      }\n    }\n    // TODO: check more edge cases\n    // TODO: improve similarity heuristic\n    // TODO: check for multi-word steals\n\n    if (valid) {\n      this.setState({\n        wordList: [...this.state.wordList, word]\n      });\n    }\n    return valid;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        flippedTiles: this.state.flippedTiles,\n        socket: this.props.socket,\n        passedRef: this.ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Entry, {\n        onSubmit: word => this.handleSubmit(word),\n        passedRef: this.ref,\n        socket: this.props.socket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordList, {\n        wordList: this.state.wordList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n}\nfunction charCounts(s) {\n  return [...s].reduce((a, e) => {\n    a[e] = a[e] ? a[e] + 1 : 1;\n    return a;\n  }, {});\n}\nfunction countMaxVal(o) {\n  let out = 0;\n  for (const elt in o) {\n    out = Math.max(o[elt], out);\n  }\n  return out;\n}\nexport default Game;","map":{"version":3,"names":["React","Board","Entry","WordList","Game","Component","constructor","props","state","dictionary","require","wordList","flippedTiles","ref","createRef","handleSubmit","word","valid","freqs","charCounts","freqs_copy","JSON","parse","stringify","i","length","countMaxVal","c","splice","stealFrom","curWord","validSteal","curWordFreqs","j","setState","render","socket","s","reduce","a","e","o","out","elt","Math","max"],"sources":["/Users/chrisunjae/Documents/Programming/Bandit/bandit-client/src/Game.js"],"sourcesContent":["import React from \"react\";\n\nimport Board from \"./Board\";\nimport Entry from \"./Entry\";\nimport WordList from \"./WordList\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dictionary: require(\"./data/words_dictionary.json\"),\n      wordList: [],\n      flippedTiles: [],\n    };\n    this.ref = React.createRef();\n  }\n\n  handleSubmit(word) {\n    let valid;\n    if (!(word in this.state.dictionary)) {\n      return false;\n    }\n\n    // check if word can be made from board alone\n    valid = true;\n    let freqs = charCounts(word);\n    let freqs_copy = JSON.parse(JSON.stringify(freqs));\n    for (let i = 0; i < this.state.flippedTiles.length; i++) {\n      if (this.state.flippedTiles[i] in freqs_copy) {\n        freqs_copy[this.state.flippedTiles[i]]--;\n      }\n    }\n    if (countMaxVal(freqs_copy) <= 0) {\n      for (let i = this.state.flippedTiles.length - 1; i >= 0; i--) {\n        let c = this.state.flippedTiles[i];\n        if (c in freqs && freqs[c] > 0) {\n          freqs[c]--;\n          this.state.flippedTiles.splice(i, 1);\n        }\n      }\n    } else {\n      let stealFrom = -1;\n      for (let i = this.state.wordList.length - 1; i >= 0; i--) {\n        let curWord = this.state.wordList[i];\n        // very rough heuristic for words that are very similar\n        if (\n          word === curWord + \"s\" ||\n          word === curWord + \"es\" ||\n          word === curWord + \"d\" ||\n          word === curWord + \"ed\" ||\n          word === curWord + \"ing\" ||\n          word === curWord + \"y\"\n        ) {\n          continue;\n        }\n        freqs_copy = JSON.parse(JSON.stringify(freqs));\n        let validSteal = true;\n        let curWordFreqs = charCounts(curWord);\n        for (let c in curWordFreqs) {\n          if (!(c in freqs_copy)) {\n            validSteal = false;\n          } else {\n            if (curWordFreqs[c] > freqs_copy[c]) {\n              validSteal = false;\n            }\n            freqs_copy[c] -= curWordFreqs[c];\n          }\n        }\n        if (!validSteal) {\n          continue;\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          continue;\n        }\n        for (let j = 0; j < this.state.flippedTiles.length; j++) {\n          if (this.state.flippedTiles[j] in freqs_copy) {\n            freqs_copy[this.state.flippedTiles[j]]--;\n          }\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          stealFrom = i;\n          for (let j = 0; j < curWord.length; j++) {\n            let c = curWord[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n            }\n          }\n          this.state.wordList.splice(i, 1);\n          for (let j = this.state.flippedTiles.length - 1; j >= 0; j--) {\n            let c = this.state.flippedTiles[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n              this.state.flippedTiles.splice(j, 1);\n            }\n          }\n          break;\n        }\n      }\n      if (stealFrom === -1) {\n        valid = false;\n      }\n    }\n    // TODO: check more edge cases\n    // TODO: improve similarity heuristic\n    // TODO: check for multi-word steals\n\n    if (valid) {\n      this.setState({\n        wordList: [...this.state.wordList, word],\n      });\n    }\n    return valid;\n  }\n\n  render() {\n    return (\n      <div>\n        <Board\n          flippedTiles={this.state.flippedTiles}\n          socket={this.props.socket}\n          passedRef={this.ref}\n        />\n        <Entry\n          onSubmit={(word) => this.handleSubmit(word)}\n          passedRef={this.ref}\n          socket={this.props.socket}\n        />\n        <WordList wordList={this.state.wordList} />\n      </div>\n    );\n  }\n}\n\nfunction charCounts(s) {\n  return [...s].reduce((a, e) => {\n    a[e] = a[e] ? a[e] + 1 : 1;\n    return a;\n  }, {});\n}\n\nfunction countMaxVal(o) {\n  let out = 0;\n  for (const elt in o) {\n    out = Math.max(o[elt], out);\n  }\n  return out;\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}