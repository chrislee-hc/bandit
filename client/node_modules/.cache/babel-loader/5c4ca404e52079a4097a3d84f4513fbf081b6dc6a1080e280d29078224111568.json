{"ast":null,"code":"var _jsxFileName = \"/Users/chrisunjae/Documents/Programming/Bandit/src/Game.js\";\nimport React from 'react';\nimport { getDatabase, ref, set } from \"firebase/database\";\nimport Board from './Board';\nimport Entry from './Entry';\nimport WordList from './WordList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dictionary: require(\"./data/words_dictionary.json\"),\n      wordList: [],\n      flippedTiles: []\n    };\n    this.ref = /*#__PURE__*/React.createRef();\n\n    /*\n    const db = getDatabase();\n    set(ref(db, 'users'), {\n      name: 'Joe',\n      age: 25,\n    })\n    */\n  }\n\n  handleSubmit(word) {\n    let valid;\n    if (!(word in this.state.dictionary)) {\n      return false;\n    }\n\n    // check if word can be made from board alone\n    valid = true;\n    let freqs = charCounts(word);\n    let freqs_copy = JSON.parse(JSON.stringify(freqs));\n    for (let i = 0; i < this.state.flippedTiles.length; i++) {\n      if (this.state.flippedTiles[i] in freqs_copy) {\n        freqs_copy[this.state.flippedTiles[i]]--;\n      }\n    }\n    if (countMaxVal(freqs_copy) <= 0) {\n      for (let i = this.state.flippedTiles.length - 1; i >= 0; i--) {\n        let c = this.state.flippedTiles[i];\n        if (c in freqs && freqs[c] > 0) {\n          freqs[c]--;\n          this.state.flippedTiles.splice(i, 1);\n        }\n      }\n    } else {\n      let stealFrom = -1;\n      for (let i = this.state.wordList.length - 1; i >= 0; i--) {\n        let curWord = this.state.wordList[i];\n        // very rough heuristic for words that are very similar\n        if (word === curWord + 's' || word === curWord + 'es' || word === curWord + 'd' || word === curWord + 'ed' || word === curWord + 'ing' || word === curWord + 'y') {\n          continue;\n        }\n        freqs_copy = JSON.parse(JSON.stringify(freqs));\n        let validSteal = true;\n        let curWordFreqs = charCounts(curWord);\n        for (let c in curWordFreqs) {\n          if (!(c in freqs_copy)) {\n            validSteal = false;\n          } else {\n            if (curWordFreqs[c] > freqs_copy[c]) {\n              validSteal = false;\n            }\n            freqs_copy[c] -= curWordFreqs[c];\n          }\n        }\n        if (!validSteal) {\n          continue;\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          continue;\n        }\n        for (let j = 0; j < this.state.flippedTiles.length; j++) {\n          if (this.state.flippedTiles[j] in freqs_copy) {\n            freqs_copy[this.state.flippedTiles[j]]--;\n          }\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          stealFrom = i;\n          for (let j = 0; j < curWord.length; j++) {\n            let c = curWord[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n            }\n          }\n          this.state.wordList.splice(i, 1);\n          for (let j = this.state.flippedTiles.length - 1; j >= 0; j--) {\n            let c = this.state.flippedTiles[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n              this.state.flippedTiles.splice(j, 1);\n            }\n          }\n          break;\n        }\n      }\n      if (stealFrom === -1) {\n        valid = false;\n      }\n    }\n    // TODO: check more edge cases\n    // TODO: improve similarity heuristic\n    // TODO: check for multi-word steals\n\n    if (valid) {\n      this.setState({\n        wordList: [...this.state.wordList, word]\n      });\n    }\n    return valid;\n  }\n  handleFlip(tile) {\n    this.setState({\n      flippedTiles: [...this.state.flippedTiles, tile]\n    });\n    this.ref.current.focus();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        onFlip: tile => this.handleFlip(tile),\n        flippedTiles: this.state.flippedTiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Entry, {\n        onSubmit: word => this.handleSubmit(word),\n        passedRef: this.ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordList, {\n        wordList: this.state.wordList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n}\nfunction charCounts(s) {\n  return [...s].reduce((a, e) => {\n    a[e] = a[e] ? a[e] + 1 : 1;\n    return a;\n  }, {});\n}\nfunction countMaxVal(o) {\n  let out = 0;\n  for (const elt in o) {\n    out = Math.max(o[elt], out);\n  }\n  return out;\n}\nexport default Game;","map":{"version":3,"names":["React","getDatabase","ref","set","Board","Entry","WordList","Game","Component","constructor","props","state","dictionary","require","wordList","flippedTiles","createRef","handleSubmit","word","valid","freqs","charCounts","freqs_copy","JSON","parse","stringify","i","length","countMaxVal","c","splice","stealFrom","curWord","validSteal","curWordFreqs","j","setState","handleFlip","tile","current","focus","render","s","reduce","a","e","o","out","elt","Math","max"],"sources":["/Users/chrisunjae/Documents/Programming/Bandit/src/Game.js"],"sourcesContent":["import React from 'react';\nimport { getDatabase, ref, set } from \"firebase/database\";\n\nimport Board from './Board';\nimport Entry from './Entry';\nimport WordList from './WordList';\n\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dictionary: require(\"./data/words_dictionary.json\"),\n      wordList: [],\n      flippedTiles: [],\n    }\n    this.ref = React.createRef();\n\n    /*\n    const db = getDatabase();\n    set(ref(db, 'users'), {\n      name: 'Joe',\n      age: 25,\n    })\n    */\n  }\n\n  handleSubmit(word) {\n    let valid;\n    if (!(word in this.state.dictionary)) {\n      return false;\n    }\n    \n    // check if word can be made from board alone\n    valid = true;\n    let freqs = charCounts(word);\n    let freqs_copy = JSON.parse(JSON.stringify(freqs));\n    for (let i = 0; i < this.state.flippedTiles.length; i++) {\n      if (this.state.flippedTiles[i] in freqs_copy) {\n        freqs_copy[this.state.flippedTiles[i]]--;\n      }\n    }\n    if (countMaxVal(freqs_copy) <= 0) {\n      for (let i = this.state.flippedTiles.length - 1; i >= 0; i--) {\n        let c = this.state.flippedTiles[i];\n        if (c in freqs && freqs[c] > 0) {\n          freqs[c]--;\n          this.state.flippedTiles.splice(i, 1);\n        }\n      }\n    }\n    else {\n      let stealFrom = -1;\n      for (let i = this.state.wordList.length - 1; i >= 0; i--) {\n        let curWord = this.state.wordList[i];\n        // very rough heuristic for words that are very similar\n        if (word === curWord + 's' ||\n            word === curWord + 'es' ||\n            word === curWord + 'd' ||\n            word === curWord + 'ed' ||\n            word === curWord + 'ing' ||\n            word === curWord + 'y') {\n          continue;\n        }\n        freqs_copy = JSON.parse(JSON.stringify(freqs)); \n        let validSteal = true;\n        let curWordFreqs = charCounts(curWord);\n        for (let c in curWordFreqs) {\n          if (!(c in freqs_copy)) {\n            validSteal = false;\n          }\n          else {\n            if (curWordFreqs[c] > freqs_copy[c]) {\n              validSteal = false;\n            }\n            freqs_copy[c] -= curWordFreqs[c];\n          }\n        }\n        if (!(validSteal)) {\n          continue;\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          continue;\n        }\n        for (let j = 0; j < this.state.flippedTiles.length; j++) {\n          if (this.state.flippedTiles[j] in freqs_copy) {\n            freqs_copy[this.state.flippedTiles[j]]--;\n          }\n        }\n        if (countMaxVal(freqs_copy) <= 0) {\n          stealFrom = i;\n          for (let j = 0; j < curWord.length; j++) {\n            let c = curWord[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n            }\n          }\n          this.state.wordList.splice(i, 1);\n          for (let j = this.state.flippedTiles.length - 1; j >= 0; j--) {\n            let c = this.state.flippedTiles[j];\n            if (c in freqs && freqs[c] > 0) {\n              freqs[c]--;\n              this.state.flippedTiles.splice(j, 1);\n            }\n          } \n          break;\n        }\n      }\n      if (stealFrom === -1) {\n        valid = false;\n      }\n    }\n    // TODO: check more edge cases\n    // TODO: improve similarity heuristic\n    // TODO: check for multi-word steals\n    \n    if (valid) {\n      this.setState({\n        wordList: [...this.state.wordList, word],\n      })\n    }\n    return valid;\n  }\n\n  handleFlip(tile) {\n    this.setState({\n      flippedTiles: [...this.state.flippedTiles, tile]\n    });\n    this.ref.current.focus();\n  }\n\n  render() {\n    return (\n      <div>\n        <Board\n          onFlip={(tile) => this.handleFlip(tile)} \n          flippedTiles={this.state.flippedTiles}\n        />\n        <Entry onSubmit={(word) => this.handleSubmit(word)} passedRef={this.ref}/>\n        <WordList wordList={this.state.wordList} />\n      </div>\n    );\n  }\n}\n\nfunction charCounts(s) {\n  return [...s].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {});\n}\n\nfunction countMaxVal(o) {\n  let out = 0;\n  for (const elt in o) {\n    out = Math.max(o[elt], out);\n  }\n  return out;\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}